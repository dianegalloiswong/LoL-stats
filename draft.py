
import time
import json
from riotwatcher import RiotWatcher, EUROPE_WEST, LoLException

f = open('riot_api_key', 'r')
key = json.load(f)
f.close()

summoner_name = 'sphaxwinny'
my_region = EUROPE_WEST



w = RiotWatcher(key)


def wait():
    while not w.can_make_request():
        time.sleep(1)



def summoner_tests(summoner_name):
    wait()
    s = w.get_summoner(name=summoner_name)
    wait()
    w.get_summoner(_id=s['id'])
    wait()
    w.get_mastery_pages([s['id'], ])
    wait()
    w.get_rune_pages([s['id'], ])
    wait()
    w.get_summoner_name([s['id'], ])
    return s


def match_tests(match):
    wait()
    w.get_match(match['matchId'])


def match_history_tests(summoner):
    wait()
    ms = w.get_match_history(summoner['id'])
    return ms


def stats_tests(summoner):
    wait()
    w.get_stat_summary(summoner['id'])
    wait()
    w.get_ranked_stats(summoner['id'])







def match_id_to_summoner_ids(match_id):
    wait()
    try:
        match_detail = w.get_match(match_id)
        return [participantIdentity['player']['summonerId'] for participantIdentity in match_detail['participantIdentities']]
    except LoLException as e:
        print('LoLException: '+str(e)+', in match_id_to_summoner_ids with match_id = '+str(match_id))
        return []

def summoner_id_to_match_ids(summoner_id):
    wait()
    try:
        match_history = w.get_match_history(summoner_id, ranked_queues=['RANKED_SOLO_5x5'])
        return [match_summary['matchId'] for match_summary in match_history['matches'] if match_summary['season']=='SEASON2015']
    except LoLException as e:
        print('LoLException: '+str(e)+', in summoner_id_to_match_ids with summoner_id = '+str(summoner_id))
        return []

def obtain_summoner_ids(n, initial_summoner_id):
    summoner_ids = set()
    match_ids = set()
    pending_summoner_ids = [initial_summoner_id]
    pending_match_ids = []
    while len(summoner_ids) < n and len(pending_summoner_ids) > 0:
        for s_id in pending_summoner_ids:
            for m_id in summoner_id_to_match_ids(s_id):
                if m_id not in match_ids:
                    match_ids.add(m_id)
                    pending_match_ids.append(m_id)
            if 5*len(match_ids) > n:
                break
        pending_summoner_ids.clear()
        for m_id in pending_match_ids:
            for s_id in match_id_to_summoner_ids(m_id):
                if s_id not in summoner_ids:
                    summoner_ids.add(s_id)
                    if len(summoner_ids)%100==0:
                        print(len(summoner_ids))
                    pending_summoner_ids.append(s_id)
            if len(summoner_ids) > n:
                break
        pending_match_ids.clear()
    return summoner_ids






def main():

    s = summoner_tests(summoner_name)
    print(s)
    # stats_tests(s)
    # print('stats tests passed')
    # ms = match_history_tests(s)
    # m = ms['matches'][0]
    # match_tests(m)
    # print('match passed')
    #
    # print(match_id_to_summoner_ids(m['matchId']))




    # summoner_ids = list(obtain_summoner_ids(5000, 30890339))
    # f = open('summoner_ids_plat', 'w')
    # json.dump(summoner_ids,f)
    # f.close()
    # f2 = open('summoner_ids_plat', 'r')
    # x=json.load(f2)
    # print(len(x))
    # f2.close()





    #print(len({22087683, 33169425, 32223261, 24322078, 40009760, 67579938, 18984999, 60807208, 36907051, 20713517, 19814453, 20918329, 67559486, 21704768, 25481281, 31981634, 39319619, 19124295, 19212362, 56959053, 21102669, 34629713, 29300820, 28108893, 47368288, 33998945, 33378400, 19032163, 21266530, 60270689, 44521582, 70037615, 46706800, 29229169, 30130293, 282741, 25184375, 24031353, 30763134, 39221377, 41531528, 22317197, 49258645, 31217813, 58392732, 27566237, 69970079, 32168103, 48488617, 23754923, 27738288, 28799156, 19493045, 29126838, 55738553, 26517696, 35637442, 20248771, 48845000, 43749577, 29948109, 36987088, 19550416, 24168658, 30118099, 21864665, 35678427, 27384027, 20154587, 21125341, 44462302, 25807072, 19112166, 19478761, 64332010, 22980843, 45844716, 19319026, 42479860, 29255928, 41097469, 66691325, 36258047, 27683076, 24045829, 24664330, 45429012, 39137558, 22851863, 50745624, 68788506, 30832926, 42092830, 19951907, 54118692, 33556772, 23193892, 61161775, 393519, 21397807, 409909, 50137398, 19632438, 19175737, 36557116, 389436, 70967615, 24271172, 40571208, 49277257, 34969929, 19454287, 29352278, 43798872, 27337052, 25168222, 28240229, 41040233, 20832621, 36286834, 24387956, 22980981, 43749751, 38463869, 39231869, 21707137, 67107203, 32375174, 38357387, 46377356, 19040655, 63336848, 37769621, 53348759, 62722456, 44738970, 21877156, 22307239, 19855786, 40481195, 20074931, 42686902, 22675899, 46367166, 32137665, 24469958, 23521742, 19169750, 19368407, 34157016, 31025628, 21148125, 43280862, 51907039, 44765660, 22766049, 34509276, 23321059, 72507876, 44650977, 23269863, 63728107, 22290926, 30104053, 24783350, 31715831, 46840312, 39537144, 20212219, 33309181, 46197246, 53516801, 44247557, 31033863, 44190226, 24261141, 30319125, 31531543, 53436955, 21443103, 36803106, 60260901, 43862573, 22870575, 35957296, 21770802, 33688119, 35572279, 23423546, 35750463, 54139459, 62489156, 65794628, 20243016, 54778441, 48577098, 26348111, 24492627, 21246548, 46037594, 24037979, 53787229, 21289565, 41577055, 44991083, 28158573, 21111408, 61012595, 43252344, 41532024, 63910528, 56670849, 41517696, 24367745, 53811844, 24574597, 56681094, 29090440, 38011529, 25592458, 19745419, 20013706, 37644946, 41960083, 53273240, 22825633, 46822054, 52124328, 24439470, 36147890, 66886323, 25563826, 20013747, 39107254, 38505164, 68999885, 20531923, 25488085, 44792537, 20423390, 44712671, 42367713, 31787747, 53310180, 42998502, 31236839, 58530536, 24163052, 30651117, 45808367, 25828080, 31044342, 23599862, 21553913, 45019898, 20564732, 61551358, 38818561, 43895554, 50158347, 44587789, 57781007, 43881233, 23456529, 26376979, 22500119, 23100187, 23051043, 22119204, 20108068, 23470888, 70597417, 39330605, 34136882, 40657719, 51934015, 24619841, 31277889, 42597191, 39473993, 40721225, 23642953, 32140109, 63650640, 52718417, 32768854, 34308957, 23274335, 25293668, 34218857, 61647721, 25148273, 21945209, 44669819, 22111099, 24134525, 24562563, 24828803, 27382663, 19483536, 28140433, 24275858, 40461204, 383897, 36168601, 24576930, 25619363, 70290341, 42419109, 34470824, 19452845, 20769714, 24888243, 20452276, 38593462, 35959736, 61647802, 32246715, 44278721, 44538820, 45337540, 20908997, 44518345, 21304269, 37518290, 44495836, 20005858, 52986851, 44618722, 22273000, 32343016, 38593520, 38996977, 37917681, 27900920, 26631161, 20585467, 44139518, 19522563, 22586376, 66470923, 39361547, 37665805, 34495506, 19182611, 19825682, 25492507, 41755679, 60320804, 28275749, 67867684, 40289319, 26158116, 56661034, 48659500, 22563884, 38407214, 58018867, 25816120, 23862329, 23430203, 22395964, 32037951, 41624640, 19047491, 39476292, 20063304, 23927891, 37798996, 31691869, 34481248, 20198498, 53779555, 50756708, 26184805, 49300586, 20657261, 46865526, 42407033, 27049084, 44117121, 31550595, 41960580, 20569219, 48263, 70741129, 20679817, 53187725, 37883021, 30012559, 66854039, 43785375, 328865, 50973865, 44668077, 25175217, 37160116, 46789814, 66348215, 19989687, 26268856, 19004608, 19240128, 40062152, 20634824, 45307083, 285928, 27323626, 33981676, 50539761, 46267634, 24382710, 34540791, 20063480, 19973368, 20378870, 24612090, 19217664, 60992769, 39427334, 36308231, 44821768, 25828620, 50896142, 25488654, 22142224, 24243473, 43058450, 21939475, 23729428, 34010391, 26279195, 22361371, 42081569, 61242659, 47346979, 44582181, 41930022, 34958634, 39628074, 39662909, 189760, 24698181, 59037001, 42964302, 33918286, 157011, 37258581, 60300630, 20288855, 40467800, 28380505, 61107546, 37356890, 47086937, 37793118, 29951326, 53568869, 26619246, 41057647, 53333361, 31974774, 32101759, 70548870, 70917511, 31731086, 22943119, 19910031, 24503698, 32777626, 43711903, 19754401, 24669604, 45039016, 31776173, 35820974, 46871983, 19516849, 31860147, 27035060, 370104, 24247739, 35212731, 37699005, 20950462, 34495933, 43546059, 29611468, 45848013, 32789967, 60317135, 22523347, 19985883, 51637724, 24600028, 39157216, 24534499, 22707689, 42950125, 21712365, 62258679, 45250040, 21384698, 44129786, 39241213, 41876989, 21970431, 33052160, 351744, 22615556, 28737030, 32171526, 23930376, 61548041, 26367499, 32822798, 30778895, 23705105, 22334995, 67692054, 50769431, 24002073, 28139033, 32581149, 29685278, 1566, 24161824, 58949154, 62793251, 40091179, 30152238, 20895278, 20889136, 19559988, 43976244, 38737463, 31016504, 52485694, 21716546, 20586052, 32187976, 51717708, 20029005, 44303949, 27039309, 19680849, 30006866, 25482840, 38237784, 37856862, 35239519, 22001252, 32298599, 46732905, 42288749, 32861810, 22965875, 49477246, 43519615, 63467139, 21710471, 70258312, 41037449, 19752586, 42837643, 44492432, 58662546, 35171986, 34901654, 140950, 43888282, 43302554, 23514778, 38465181, 31000221, 19394213, 43101862, 28870311, 19652265, 51021488, 19822256, 30475952, 20481712, 23529138, 19164853, 28219069, 27031231, 45825732, 25495236, 44371654, 44619464, 24319693, 19703501, 31715022, 31217360, 71726805, 41098969, 26500829, 67610333, 33367778, 23224035, 29828841, 31852270, 19732212, 61951733, 53153530, 19007230, 24694527, 57837313, 20090627, 21298949, 50177799, 35286803, 40900372, 31987477, 29724438, 51511063, 53262107, 29576992, 36742944, 40150819, 24141612, 38369070, 23732015, 30877487, 43687728, 27660085, 70457146, 52289353, 62979913, 53376847, 45287248, 36906832, 44517205, 44166998, 30158685, 58124126, 33001316, 46348135, 35227496, 27494254, 31170415, 50737009, 23738226, 25487219, 50872180, 33027957, 58066813, 42278781, 32958333, 50790277, 44492678, 49518474, 50939786, 52629388, 32911246, 19322767, 36841360, 37257115, 24545181, 29128606, 21807005, 38260641, 22628259, 47339432, 40257451, 21342123, 43794349, 23103407, 42809266, 44945331, 40318899, 24373173, 44748734, 20053956, 25923525, 30519244, 24569804, 68913104, 46720980, 43241433, 54259674, 24324063, 31819744, 61687778, 43806703, 21559280, 33910770, 62586867, 28325877, 23496694, 29755383}))

    #print(len({44492678, 32822798, 19182611, 32777626, 60260901, 43101862, 40289319, 60807208, 41930022, 28870311, 19516849, 38737463, 55738553, 44278721, 39476292, 20586052, 40062152, 52289353, 21864665, 28380505, 61107546, 43280862, 31819744, 33001316, 43806703, 36286834, 23738226, 44139518}))



if __name__ == '__main__':
    main()